#define ENC_A 2 // NEED to use this pin for interrupts
#define ENC_B 3 // NEED to use this pin for interrupts

unsigned long _lastIncReadTime = micros();

volatile int counter = 0;

void setup()
{
  // set encoder pins and attach interrupts
  pinMode(ENC_A, INPUT_PULLUP);
  pinMode(ENC_B, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(ENC_A), read_encoder, CHANGE);
  attachInterrupt(digitalPinToInterrupt(ENC_B), read_encoder, CHANGE);

  // start serial monitor
  Serial.begin(115200);
}

void loop()
{
  volatile int SpinState = 0;
  static int lastCounter = 0;
  static int lastSpinState = 0;

  // if count has changed print the new value to serial
  if (counter != lastCounter)
  {
    Serial.println(counter);
    lastCounter = counter;
    SpinState = 1;
  }

}

void read_encoder() 
{
  //encoder interrput routine for both pins. updates counter if they
  //are valid and have rotated a full indent

  static uint8_t old_AB =3; // lookup table index
  static int8_t encval = 0; // enocder value
  static const int8_t enc_states[] = {0,-1,1,0,1,0,0,-1,-1,0,0,1,0,1,-1,0}; // lookup table

  old_AB <<=2; // remember previous state

  if (digitalRead(ENC_A)) old_AB |= 0x02; // add current state of pin A
  if (digitalRead(ENC_B)) old_AB |= 0x01; // add current state of pin B 

  encval += enc_states[( old_AB & 0x0f )];

  // update counter if encoder has rotated a full indent, that is at least 4 steps
  if ( encval > 3)
  {
    _lastIncReadTime = micros();
    counter = counter + 1;
    encval = 0;
  }

}
